// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package query

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type UserRole string

const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
	UserRoleGuest UserRole = "guest"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type User struct {
	ID          uuid.UUID        `json:"id"`
	Picture     pgtype.Text      `json:"picture"`
	Role        NullUserRole     `json:"role"`
	FullName    string           `json:"full_name"`
	Email       pgtype.Text      `json:"email"`
	GoogleUid   pgtype.Text      `json:"google_uid"`
	PhoneNumber pgtype.Text      `json:"phone_number"`
	Password    pgtype.Text      `json:"password"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

type UserAgent struct {
	ID          uuid.UUID        `json:"id"`
	Picture     pgtype.Text      `json:"picture"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	PhoneNumber string           `json:"phone_number"`
	Email       string           `json:"email"`
	UserID      pgtype.UUID      `json:"user_id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}
