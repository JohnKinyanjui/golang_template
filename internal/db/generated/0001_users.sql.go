// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0001_users.sql

package query

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const authenticateByEmail = `-- name: AuthenticateByEmail :one
select id from users where email = $1::text and password = crypt($2::text, password) limit 1
`

type AuthenticateByEmailParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) AuthenticateByEmail(ctx context.Context, arg AuthenticateByEmailParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, authenticateByEmail, arg.Email, arg.Password)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createUserAgent = `-- name: CreateUserAgent :one
insert into user_agents (user_id, picture, name, description, phone_number, email)
values ($1::uuid, $2::text, $3::text, $4::text, $5::text, $6::text)
returning id
`

type CreateUserAgentParams struct {
	UserID      uuid.UUID `json:"user_id"`
	Picture     string    `json:"picture"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	PhoneNumber string    `json:"phone_number"`
	Email       string    `json:"email"`
}

func (q *Queries) CreateUserAgent(ctx context.Context, arg CreateUserAgentParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUserAgent,
		arg.UserID,
		arg.Picture,
		arg.Name,
		arg.Description,
		arg.PhoneNumber,
		arg.Email,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
select 
    u.picture, u.full_name, u.email,
    u.role::text as role, u.phone_number, u.created_at, 
    json_build_object(
        'id', a.id,
        'picture', a.picture,
        'name', a.name,
        'description', a.description,
        'phone_number', a.phone_number,
        'email', a.email
    ) as agent
from users u
left join user_agents a on u.id = a.user_id 
where u.id = $1
`

type GetUserRow struct {
	Picture     pgtype.Text      `json:"picture"`
	FullName    string           `json:"full_name"`
	Email       pgtype.Text      `json:"email"`
	Role        string           `json:"role"`
	PhoneNumber pgtype.Text      `json:"phone_number"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	Agent       json.RawMessage  `json:"agent"`
}

func (q *Queries) GetUser(ctx context.Context, userID uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i GetUserRow
	err := row.Scan(
		&i.Picture,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.Agent,
	)
	return i, err
}

const signInWithGoogle = `-- name: SignInWithGoogle :one
select id from users where email = $1::text and google_uid = $2::text
`

type SignInWithGoogleParams struct {
	Email     string `json:"email"`
	GoogleUid string `json:"google_uid"`
}

func (q *Queries) SignInWithGoogle(ctx context.Context, arg SignInWithGoogleParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, signInWithGoogle, arg.Email, arg.GoogleUid)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateGoogleDetails = `-- name: UpdateGoogleDetails :one
update users set email = $1::text , google_uid = $2::text where id = $3 returning id
`

type UpdateGoogleDetailsParams struct {
	Email     string    `json:"email"`
	GoogleUid string    `json:"google_uid"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateGoogleDetails(ctx context.Context, arg UpdateGoogleDetailsParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateGoogleDetails, arg.Email, arg.GoogleUid, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
